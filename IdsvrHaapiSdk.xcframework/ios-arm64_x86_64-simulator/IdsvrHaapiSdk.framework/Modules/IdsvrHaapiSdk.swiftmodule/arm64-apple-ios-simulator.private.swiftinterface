// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IdsvrHaapiSdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CommonCrypto
import Compression
import CryptoKit
import DeviceCheck
import Foundation
@_exported import IdsvrHaapiSdk
import LocalAuthentication
import OSLog
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS, deprecated, introduced: 14, message: "This class is deprecated and will not be supported.")
public class InternalTestUtility {
  public static var isEnabled: Swift.Bool {
    get
    set
  }
  public init(oauthTokenManager: IdsvrHaapiSdk.OAuthTokenManager)
  public func createDPoP(keyType: IdsvrHaapiSdk.CryptoKeyType) throws -> IdsvrHaapiSdk.Dpop
  public func hasDPoPForRefreshToken(_ refreshToken: Swift.String) throws -> Swift.Bool
  public func save(dpop: IdsvrHaapiSdk.Dpop, for refreshToken: Swift.String)
  public func deleteDPopForRefreshToken(_ refreshToken: Swift.String) -> Swift.Bool
  public func applyCredentials(urlSession: Foundation.URLSession, for clientAuthenticationMethod: any IdsvrHaapiSdk.ClientAuthenticationMethod, with clientId: Swift.String, and tokenEndpointURL: Foundation.URL) -> Foundation.URLSession
  public func applyCredentials(urlRequest: Foundation.URLRequest, for clientAuthenticationMethod: any IdsvrHaapiSdk.ClientAuthenticationMethod, with clientId: Swift.String, and tokenEndpointURL: Foundation.URL) -> Foundation.URLRequest
  public func dataTask(on urlSession: Foundation.URLSession, with urlRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionDataTask
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class HTTPURLResponseContent : ObjectiveC.NSObject {
  final public let data: Foundation.Data?
  final public let httpURLResponse: Foundation.HTTPURLResponse?
  public var dataAsDictionary: [Swift.String : Any] {
    get
    set
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ErrorHTTPURLResponseContent : IdsvrHaapiSdk.HTTPURLResponseContent {
  final public let error: any Swift.Error
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class FormField : Swift.Codable, Swift.Equatable {
  final public let name: Swift.String
  final public let label: IdsvrHaapiSdk.Message?
  final public let placeholder: IdsvrHaapiSdk.Message?
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: IdsvrHaapiSdk.FormField, rhs: IdsvrHaapiSdk.FormField) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class PasswordFormField : IdsvrHaapiSdk.FormField {
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class UsernameFormField : IdsvrHaapiSdk.FormField {
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class TextFormField : IdsvrHaapiSdk.FormField {
  @frozen public enum Kind : Swift.RawRepresentable, Swift.Codable, Swift.Equatable {
    public typealias RawValue = Swift.String
    case number
    case email
    case url
    case tel
    case color
    case unknown(value: Swift.String)
    public init(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  final public let kind: IdsvrHaapiSdk.TextFormField.Kind?
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectFormField : IdsvrHaapiSdk.FormField {
  final public let options: [IdsvrHaapiSdk.SelectFormField.Option]
  final public let value: Swift.String?
  public struct Option : Swift.Codable, Swift.Equatable {
    public let label: IdsvrHaapiSdk.Message
    public let value: Swift.String
    public let selected: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public static func == (a: IdsvrHaapiSdk.SelectFormField.Option, b: IdsvrHaapiSdk.SelectFormField.Option) -> Swift.Bool
  }
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class CheckboxFormField : IdsvrHaapiSdk.FormField {
  final public let checked: Swift.Bool
  final public let readonly: Swift.Bool
  final public let value: Swift.String?
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ContextFormField : IdsvrHaapiSdk.FormField {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class HiddenFormField : IdsvrHaapiSdk.FormField {
  final public let value: Swift.String
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc final public class DCRConfiguration : ObjectiveC.NSObject {
  @objc public init(templateClientId: Swift.String, clientRegistrationEndpointUrl: Foundation.URL)
  @objc deinit
}
public protocol FollowUpTag {
  var subsystem: Swift.String { get }
  var tagName: Swift.String { get }
}
extension IdsvrHaapiSdk.FollowUpTag {
  public var osLog: os.OSLog {
    get
  }
}
@available(iOS 13.0, *)
extension Swift.StringProtocol {
  public var sha256Hex: Swift.String {
    get
  }
  public var dataUtf8Encoding: Foundation.Data {
    get
  }
  public var base64URLEncodedStringOfSHA256Hash: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var stringUtf8Encoding: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
public class KeychainStorage : IdsvrHaapiSdk.Storage {
  public func write(key: Swift.String, data: Foundation.Data) throws
  public func read(key: Swift.String) throws -> Foundation.Data?
  public func delete(key: Swift.String) throws
  @objc deinit
}
@available(iOS 14.0, *)
public enum HaapiModel {
  public enum ContentFactory {
    public static func metadata(templateArea: Swift.String?, viewName: Swift.String?) -> IdsvrHaapiSdk.Metadata?
    public static func message(key: Swift.String?, literal: Swift.String) -> IdsvrHaapiSdk.Message
    public static func userMessage(text: IdsvrHaapiSdk.Message, classList: [Swift.String]) -> IdsvrHaapiSdk.UserMessage
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class Dpop : ObjectiveC.NSObject, Swift.Codable {
  @objc public var jwkThumbprint: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc @available(swift, obsoleted: 0.1, message: "Use `createProof(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func createProof(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func createProof(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc @available(swift, obsoleted: 0.1, message: "Use `getHeaderValue(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiModel {
  public enum StepFactory {
    public static func authenticatorOption(title: IdsvrHaapiSdk.Message, type: Swift.String?, action: IdsvrHaapiSdk.FormAction) -> IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption
    public static func authenticatorSelector(title: IdsvrHaapiSdk.Message, authenticators: [IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption], metadata: IdsvrHaapiSdk.Metadata?, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.AuthenticatorSelectorStep
    public static func interactiveForm(actions: [IdsvrHaapiSdk.FormAction], type: IdsvrHaapiSdk.RepresentationType, metadata: IdsvrHaapiSdk.Metadata?, messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.InteractiveFormStep
    public static func redirection(redirectAction: IdsvrHaapiSdk.FormAction, metadata: IdsvrHaapiSdk.Metadata?, actions: [IdsvrHaapiSdk.Action], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.RedirectionStep
    public static func polling(mainAction: IdsvrHaapiSdk.FormAction, cancelAction: IdsvrHaapiSdk.FormAction?, metadata: IdsvrHaapiSdk.Metadata?, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.PollingProperties, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.PollingStep
    public static func oAuthAuthorization(metadata: IdsvrHaapiSdk.Metadata?, messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.OAuthAuthorizationResponseProperties, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.OAuthAuthorizationResponseStep
    public static func continueSame(metadata: IdsvrHaapiSdk.Metadata?, messages: [IdsvrHaapiSdk.UserMessage], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.ContinueSameStep
    public static func userConsent(metadata: IdsvrHaapiSdk.Metadata?, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.UserConsentStep
    public static func externalBrowserClientOperation(actionModel: IdsvrHaapiSdk.ExternalBrowserClientOperationActionModel, metadata: IdsvrHaapiSdk.Metadata?, type: IdsvrHaapiSdk.RepresentationType, actions: [IdsvrHaapiSdk.Action], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.ExternalBrowserClientOperationStep
    public static func bankIdClientOperation(activationLink: IdsvrHaapiSdk.Link?, actionModel: IdsvrHaapiSdk.BankIdClientOperationActionModel, metadata: IdsvrHaapiSdk.Metadata?, type: IdsvrHaapiSdk.RepresentationType, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.BankIdClientOperationStep
    public static func encapClientOperation(actionModel: IdsvrHaapiSdk.EncapAutoActivationClientOperationActionModel, metadata: IdsvrHaapiSdk.Metadata?, type: IdsvrHaapiSdk.RepresentationType, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.EncapClientOperationStep
    public static func webauthnRegistrationClientOperation(actionModel: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel, metadata: IdsvrHaapiSdk.Metadata?, type: IdsvrHaapiSdk.RepresentationType, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) throws -> IdsvrHaapiSdk.WebAuthnRegistrationClientOperationStep
    public static func webAuthnAuthenticationClientOperation(actionModel: IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel, metadata: IdsvrHaapiSdk.Metadata?, type: IdsvrHaapiSdk.RepresentationType, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) throws -> IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationStep
    public static func genericClientOperation(actionModel: IdsvrHaapiSdk.GenericClientOperationActionModel, metadata: IdsvrHaapiSdk.Metadata?, type: IdsvrHaapiSdk.RepresentationType, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: IdsvrHaapiSdk.GenericProperties?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.GenericClientOperationStep
    public static func genericRepresentation(type: IdsvrHaapiSdk.RepresentationType, metadata: IdsvrHaapiSdk.Metadata?, actions: [IdsvrHaapiSdk.Action], messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], properties: (any IdsvrHaapiSdk.Properties)?, rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.GenericRepresentationStep
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.CryptoKeyType : Swift.Codable {
}
public protocol RawJsonRepresentable {
  var rawJsonString: Swift.String? { get }
}
@available(iOS 14.0, *)
public typealias HttpHeadersProvider = () -> [Swift.String : Swift.String]
@available(iOS 14.0, *)
public typealias OAuthAuthorizationParametersProvider = () -> IdsvrHaapiSdk.OAuthAuthorizationParameters
@available(iOS 14.0, *)
@objc public protocol HaapiConfigurable {
  @objc var name: Swift.String { get }
  @objc var clientId: Swift.String { get }
  @objc var baseURL: Foundation.URL { get }
  @objc var tokenEndpointURL: Foundation.URL { get }
  @objc var authorizationEndpointURL: Foundation.URL { get }
  @objc var appRedirect: Swift.String { get }
  @objc var urlSession: Foundation.URLSession { get }
  @objc var isAutoRedirect: Swift.Bool { get }
  @objc var httpHeadersProvider: IdsvrHaapiSdk.HttpHeadersProvider? { get }
  @objc var authorizationParametersProvider: IdsvrHaapiSdk.OAuthAuthorizationParametersProvider? { get }
  @objc var minTokenTtl: Foundation.TimeInterval { get }
  @objc var attestationConfiguration: IdsvrHaapiSdk.AttestationConfiguration { get }
  @objc var tokenBoundConfiguration: any IdsvrHaapiSdk.TokenBoundConfiguration { get }
  @objc var clientAuthenticationMethod: any IdsvrHaapiSdk.ClientAuthenticationMethod { get }
  @objc var applicationBundle: Foundation.Bundle? { get }
}
@objc @available(iOS 14.0, *)
@objcMembers final public class HaapiConfiguration : ObjectiveC.NSObject, IdsvrHaapiSdk.HaapiConfigurable, IdsvrHaapiSdk.OAuthTokenConfigurable {
  @objc final public let name: Swift.String
  @objc final public let clientId: Swift.String
  @objc final public let baseURL: Foundation.URL
  @objc final public let tokenEndpointURL: Foundation.URL
  @objc final public let authorizationEndpointURL: Foundation.URL
  @objc final public let appRedirect: Swift.String
  @objc final public let httpHeadersProvider: IdsvrHaapiSdk.HttpHeadersProvider?
  @objc final public let isAutoRedirect: Swift.Bool
  @objc final public let urlSession: Foundation.URLSession
  @objc final public let revocationEndpointURL: Foundation.URL?
  @objc final public let authorizationParametersProvider: IdsvrHaapiSdk.OAuthAuthorizationParametersProvider?
  @objc final public let minTokenTtl: Foundation.TimeInterval
  @objc final public let attestationConfiguration: IdsvrHaapiSdk.AttestationConfiguration
  @objc final public let tokenBoundConfiguration: any IdsvrHaapiSdk.TokenBoundConfiguration
  @objc final public let tokenEndpointResponseListener: (any IdsvrHaapiSdk.OAuthTokenManager.TokenEndpointResponseListener)?
  @objc final public let clientAuthenticationMethod: any IdsvrHaapiSdk.ClientAuthenticationMethod
  @objc final public let applicationBundle: Foundation.Bundle?
  @objc public init(name: Swift.String, clientId: Swift.String, baseURL: Foundation.URL, tokenEndpointURL: Foundation.URL, authorizationEndpointURL: Foundation.URL, appRedirect: Swift.String, httpHeadersProvider: IdsvrHaapiSdk.HttpHeadersProvider?, authorizationParametersProvider: IdsvrHaapiSdk.OAuthAuthorizationParametersProvider?, isAutoRedirect: Swift.Bool = true, urlSession: Foundation.URLSession = URLSession(configuration: .haapi), revocationEndpointURL: Foundation.URL? = nil, minTokenTtl: Foundation.TimeInterval = TimeInterval(floatLiteral: 10.0), attestationConfiguration: IdsvrHaapiSdk.AttestationConfiguration = AttestationConfiguration(), tokenBoundConfiguration: any IdsvrHaapiSdk.TokenBoundConfiguration = UnboundedTokenConfiguration(), tokenEndpointResponseListener: (any IdsvrHaapiSdk.OAuthTokenManager.TokenEndpointResponseListener)? = nil, clientAuthenticationMethod: any IdsvrHaapiSdk.ClientAuthenticationMethod = ClientAuthenticationMethodNone(), applicationBundle: Foundation.Bundle? = nil)
  @objc deinit
}
@available(iOS 14.0, *)
extension Foundation.URLSessionConfiguration {
  public static var haapi: Foundation.URLSessionConfiguration {
    get
  }
}
@objc @available(iOS 14.0, *)
final public class AttestationConfiguration : ObjectiveC.NSObject {
  @objc public init(useAttestation: Swift.Bool = true, attestationMaxRetries: Swift.Int = 3)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers public class Problem : ObjectiveC.NSObject, IdsvrHaapiSdk.ProblemRepresentation {
  final public let type: IdsvrHaapiSdk.ProblemType
  @objc final public let metadata: IdsvrHaapiSdk.Metadata?
  @objc final public let title: IdsvrHaapiSdk.Message?
  final public let messages: [IdsvrHaapiSdk.UserMessage]
  final public let links: [IdsvrHaapiSdk.Link]
  @objc final public let rawJsonString: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@available(iOS 14.0, *)
public typealias OAuthCompletion = (_ tokenResponse: IdsvrHaapiSdk.TokenResponse) -> Swift.Void
@available(iOS 14.0, *)
public typealias OAuthRevocationCompletion = (_ response: IdsvrHaapiSdk.TokenRevocationResponse) -> Swift.Void
@available(iOS 14.0, *)
@frozen public enum TokenResponse {
  case successfulToken(IdsvrHaapiSdk.SuccessfulTokenResponse)
  case errorToken(IdsvrHaapiSdk.ErrorTokenResponse)
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
@frozen public enum TokenRevocationResponse {
  case success
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
@objc public protocol OAuthTokenConfigurable {
  @objc var clientId: Swift.String { get }
  @objc var tokenEndpointURL: Foundation.URL { get }
  @objc var appRedirect: Swift.String { get }
  @objc var urlSession: Foundation.URLSession { get }
  @objc var revocationEndpointURL: Foundation.URL? { get }
  @objc var tokenBoundConfiguration: any IdsvrHaapiSdk.TokenBoundConfiguration { get }
  @objc var tokenEndpointResponseListener: (any IdsvrHaapiSdk.OAuthTokenManager.TokenEndpointResponseListener)? { get }
  @objc var clientAuthenticationMethod: any IdsvrHaapiSdk.ClientAuthenticationMethod { get }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class OAuthTokenManager : ObjectiveC.NSObject {
  @objc final public let oauthTokenConfiguration: any IdsvrHaapiSdk.OAuthTokenConfigurable
  @objc convenience public init(oauthTokenConfiguration: any IdsvrHaapiSdk.OAuthTokenConfigurable)
  final public func fetchAccessToken(with authorizationCode: Swift.String, dpop: IdsvrHaapiSdk.Dpop? = nil, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping IdsvrHaapiSdk.OAuthCompletion)
  final public func refreshAccessToken(with refreshToken: Swift.String, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping IdsvrHaapiSdk.OAuthCompletion)
  final public func revokeAccessToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiSdk.OAuthRevocationCompletion)
  final public func revokeRefreshToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiSdk.OAuthRevocationCompletion)
  @objc public protocol TokenEndpointResponseListener {
    @objc func onSuccess(_ value: IdsvrHaapiSdk.OAuthTokenManager.SuccessTokenHTTPURLResponseContent)
    @objc func onError(_ value: IdsvrHaapiSdk.ErrorHTTPURLResponseContent)
    @objc func onTokenError(_ value: IdsvrHaapiSdk.OAuthTokenManager.ErrorTokenHTTPURLResponseContent)
  }
  @objc @_hasMissingDesignatedInitializers public class SuccessTokenHTTPURLResponseContent : IdsvrHaapiSdk.HTTPURLResponseContent {
    final public let successfulTokenResponse: IdsvrHaapiSdk.SuccessfulTokenResponse
    @objc deinit
  }
  @objc @_hasMissingDesignatedInitializers public class ErrorTokenHTTPURLResponseContent : IdsvrHaapiSdk.HTTPURLResponseContent {
    final public let errorTokenResponse: IdsvrHaapiSdk.ErrorTokenResponse
    @objc deinit
  }
  @objc deinit
}
@available(*, unavailable)
@objc extension IdsvrHaapiSdk.OAuthTokenManager {
  @objc final public func fetchAccessToken(with authorizationCode: Swift.String, dpop: IdsvrHaapiSdk.Dpop? = nil, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping (IdsvrHaapiSdk.SuccessfulTokenResponse?, IdsvrHaapiSdk.ErrorTokenResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func refreshAccessToken(with refreshToken: Swift.String, additionalParameters: [Swift.String : Swift.String]? = nil, completionHandler: @escaping (IdsvrHaapiSdk.SuccessfulTokenResponse?, IdsvrHaapiSdk.ErrorTokenResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func revokeRefreshToken(with token: Swift.String, completionHandler: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
}
@available(iOS 14.0, *)
@frozen public enum HaapiResult {
  case representation(any IdsvrHaapiSdk.HaapiRepresentation)
  case problem(any IdsvrHaapiSdk.ProblemRepresentation)
  case error(any Swift.Error)
}
public protocol HaapiResponse : IdsvrHaapiSdk.RawJsonRepresentable, Swift.Decodable, Swift.Encodable {
}
@available(iOS 14.0, *)
public protocol HaapiRepresentation : IdsvrHaapiSdk.HaapiResponse {
  var metadata: IdsvrHaapiSdk.Metadata? { get }
  var type: IdsvrHaapiSdk.RepresentationType { get }
  var properties: (any IdsvrHaapiSdk.Properties)? { get }
  var links: [IdsvrHaapiSdk.Link] { get }
  var messages: [IdsvrHaapiSdk.UserMessage] { get }
}
@available(iOS 14.0, *)
public protocol ProblemRepresentation : IdsvrHaapiSdk.HaapiResponse {
  var metadata: IdsvrHaapiSdk.Metadata? { get }
  var type: IdsvrHaapiSdk.ProblemType { get }
  var title: IdsvrHaapiSdk.Message? { get }
  var messages: [IdsvrHaapiSdk.UserMessage] { get }
  var links: [IdsvrHaapiSdk.Link] { get }
}
@available(iOS 14.0, *)
public protocol ClientOperationStep : IdsvrHaapiSdk.HaapiRepresentation {
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class Metadata : ObjectiveC.NSObject, Swift.Codable {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
@frozen public enum ProblemType : Swift.Codable, Swift.Equatable {
  case authenticationFailedProblem
  case invalidInputProblem
  case incorrectCredentialsProblem
  case errorAuthorizationResponseProblem
  case unexpectedProblem
  case tooManyAttemptsProblem
  case genericUserProblem
  case sessionAndAccessTokenMismatchProblem
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ProblemType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: IdsvrHaapiSdk.ProblemType.RawValue)
  public var rawValue: IdsvrHaapiSdk.ProblemType.RawValue {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class HaapiTokenManager : ObjectiveC.NSObject {
  @objc final public var dpop: IdsvrHaapiSdk.Dpop? {
    @objc get
  }
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiTokenManager {
  @objc @available(*, deprecated, renamed: "createClient()", message: "  This method doesn't work with the current API design for Dpop and Client Authentication\n  management and it will be removed on next major version.")
  final public func createClient(urlSession: Foundation.URLSession? = nil) -> IdsvrHaapiSdk.HaapiClient
  @objc final public func createClient() -> IdsvrHaapiSdk.HaapiClient
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.DpopAccessTokenInfo, IdsvrHaapiSdk.HaapiError>) -> Swift.Void)
  @objc final public func close()
  @objc final public func clearState()
  @available(*, unavailable, renamed: "getHaapiToken(forceFresh:dpopNonce:completionHandler:)", message: "Deprecated. Please use getHaapiToken(forceFresh:dpopNonce:completionHandler:)")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.DpopAccessTokenInfo, IdsvrHaapiSdk.HaapiError>) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false) -> IdsvrHaapiSdk.HaapiTokenResult?
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String?) -> IdsvrHaapiSdk.HaapiTokenResult?
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class Action : Swift.Codable, Swift.Equatable {
  final public let kind: IdsvrHaapiSdk.ActionKind
  final public let title: IdsvrHaapiSdk.Message?
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.Action, rhs: IdsvrHaapiSdk.Action) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ClientOperationAction : IdsvrHaapiSdk.Action {
  final public let model: IdsvrHaapiSdk.ClientOperationActionModel
  final public let properties: IdsvrHaapiSdk.ClientOperationAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiSdk.ClientOperationAction.Properties, rhs: IdsvrHaapiSdk.ClientOperationAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class FormAction : IdsvrHaapiSdk.Action {
  final public let model: IdsvrHaapiSdk.FormActionModel
  final public let properties: IdsvrHaapiSdk.FormAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let authenticatorType: Swift.String
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiSdk.FormAction.Properties, rhs: IdsvrHaapiSdk.FormAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectorAction : IdsvrHaapiSdk.Action {
  final public let model: IdsvrHaapiSdk.SelectorActionModel
  final public let properties: IdsvrHaapiSdk.SelectorAction.Properties?
  public struct Properties : Swift.Codable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (lhs: IdsvrHaapiSdk.SelectorAction.Properties, rhs: IdsvrHaapiSdk.SelectorAction.Properties) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public protocol ClientAuthenticationMethod {
}
@objc @_inheritsConvenienceInitializers final public class ClientAuthenticationMethodNone : ObjectiveC.NSObject, IdsvrHaapiSdk.ClientAuthenticationMethod {
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class ClientAuthenticationMethodSecret : ObjectiveC.NSObject, IdsvrHaapiSdk.ClientAuthenticationMethod {
  @objc public init(secret: Swift.String)
  @objc deinit
}
@objc @available(iOS 14.0, *)
final public class KeyPinning : ObjectiveC.NSObject {
  @objc public init(hostname: Swift.String, publicKeyHash: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ClientAuthenticationMethodMTLS : ObjectiveC.NSObject, IdsvrHaapiSdk.ClientAuthenticationMethod {
  @objc convenience public init(pkcs12Filename: Swift.String, pkcs12Passphrase: Swift.String, serverPEMFilename: Swift.String, isValidatingHostname: Swift.Bool, bundle: Foundation.Bundle = Bundle.main) throws
  @objc convenience public init(pkcs12Filename: Swift.String, pkcs12Passphrase: Swift.String, serverKeyPinnings: [IdsvrHaapiSdk.KeyPinning], bundle: Foundation.Bundle = Bundle.main) throws
  @objc deinit
}
@available(iOS 14.0, *)
@objc public enum JWTAsymmetricAlgorithm : Swift.Int {
  case rs256
  case rs384
  case rs512
  case ps256
  case ps384
  case ps512
  case es256
  case es384
  case es512
  public init?(rawValue: Swift.Int)
  @available(iOS 14.0, *)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @available(iOS 14.0, *)
final public class ClientAuthenticationMethodJWTAsymmetric : ObjectiveC.NSObject, IdsvrHaapiSdk.ClientAuthenticationMethod {
  final public let signatureAlgorithm: IdsvrHaapiSdk.JWTAsymmetricAlgorithm
  final public let privateKey: Security.SecKey
  @objc public init(pemFilename: Swift.String, signatureAlgorithm: IdsvrHaapiSdk.JWTAsymmetricAlgorithm, bundle: Foundation.Bundle = Bundle.main) throws
  @objc deinit
}
@available(iOS 14.0, *)
@objc public enum JWTSymmetricAlgorithm : Swift.Int, Swift.CaseIterable {
  case hs256
  case hs384
  case hs512
  public init?(rawValue: Swift.Int)
  @available(iOS 14.0, *)
  public typealias AllCases = [IdsvrHaapiSdk.JWTSymmetricAlgorithm]
  @available(iOS 14.0, *)
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [IdsvrHaapiSdk.JWTSymmetricAlgorithm] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @available(iOS 14.0, *)
final public class ClientAuthenticationMethodJWTSymmetric : ObjectiveC.NSObject, IdsvrHaapiSdk.ClientAuthenticationMethod {
  final public let signatureAlgorithm: IdsvrHaapiSdk.JWTSymmetricAlgorithm
  final public let secretKey: Swift.String
  @objc public init(signatureAlgorithm: IdsvrHaapiSdk.JWTSymmetricAlgorithm, secretKey: Swift.String)
  @objc deinit
}
@available(iOS 14, *)
public enum StorageError : Swift.Error {
  case writeError(cause: any Swift.Error)
  case readError(cause: any Swift.Error)
  case deleteError(cause: any Swift.Error)
}
@available(iOS 14, *)
extension IdsvrHaapiSdk.StorageError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 14, *)
public protocol Storage {
  func read(key: Swift.String) throws -> Foundation.Data?
  func write(key: Swift.String, data: Foundation.Data) throws
  func delete(key: Swift.String) throws
}
@available(iOS 14.0, *)
public protocol Properties : Swift.Decodable, Swift.Encodable {
  var rawJsonString: Swift.String { get }
}
@available(iOS 14.0, *)
public struct GenericProperties : IdsvrHaapiSdk.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public static func == (lhs: IdsvrHaapiSdk.GenericProperties, rhs: IdsvrHaapiSdk.GenericProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseProperties : IdsvrHaapiSdk.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public let scope: Swift.String?
  public let state: Swift.String?
  public let code: Swift.String?
  public let idToken: Swift.String?
  public let rawJson: [Swift.String : Swift.String]
  public static func == (a: IdsvrHaapiSdk.OAuthAuthorizationResponseProperties, b: IdsvrHaapiSdk.OAuthAuthorizationResponseProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
public struct PollingProperties : IdsvrHaapiSdk.Properties, Swift.Equatable {
  public let rawJsonString: Swift.String
  public let recipientOfCommunication: Swift.String?
  public let status: IdsvrHaapiSdk.PollingStatus
  public static func == (a: IdsvrHaapiSdk.PollingProperties, b: IdsvrHaapiSdk.PollingProperties) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum SdkFollowUpTag : Swift.String, IdsvrHaapiSdk.FollowUpTag, Swift.CaseIterable {
  case flow
  case http
  case mapping
  case oAuth
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiSdk.SdkFollowUpTag]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [IdsvrHaapiSdk.SdkFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14, *)
public enum HaapiError : IdsvrHaapiSdk.IdsvrError, Swift.Error {
  case communication(message: Swift.String, cause: (any Swift.Error)? = nil)
  case serverError(_: Swift.String, errorDescription: Swift.String, statusCode: Swift.Int)
  @available(*, deprecated, message: "This case is being replaced by `serverError`.")
  case invalidStatusCode(_: Swift.Int)
  case invalidURLResponse(_: Foundation.URLResponse?, reason: Swift.String, cause: (any Swift.Error)? = nil)
  case attestationNotSupported
  case attestationFailure(cause: (any Swift.Error)? = nil)
  case attestationKeyGenFailure(cause: (any Swift.Error)? = nil)
  case attestationRefusedByServer(cause: (any Swift.Error)? = nil)
  case assertionFailure(cause: (any Swift.Error)? = nil)
  case dpopKeyCreationFailure(cause: any Swift.Error)
  case dpopProofCreationFailure(cause: any Swift.Error)
  case dpopProofFailure(message: Swift.String, cause: any Swift.Error)
  case haapiTokenManagerIsClosed
  case haapiTokenManagerIsExpired
  case illegalState(message: Swift.String)
  case invalidConfiguration(reason: Swift.String)
  case haapiTokenManagerAlreadyExists(name: Swift.String)
  public var failureReason: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var error: Swift.String {
    get
  }
  public var cause: (any Swift.Error)? {
    get
  }
  public var recoverySuggestion: IdsvrHaapiSdk.IdsvrErrorHandling {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class HaapiTokenResult : ObjectiveC.NSObject {
  @objc final public let dPopAccessTokenInfo: IdsvrHaapiSdk.DpopAccessTokenInfo?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@available(iOS 14.0, *)
public struct UserMessage : Swift.Codable, Swift.Equatable {
  public let text: IdsvrHaapiSdk.Message
  public let classList: [Swift.String]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: IdsvrHaapiSdk.UserMessage, b: IdsvrHaapiSdk.UserMessage) -> Swift.Bool
}
public enum RetryCondition {
  case now
  case whenAppInForeground
  public static func == (a: IdsvrHaapiSdk.RetryCondition, b: IdsvrHaapiSdk.RetryCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UnrecoverableAction : Swift.Equatable {
  case modifyConfiguration(reason: Swift.String)
  case introspectCause
  case invalidPlatform
  public static func == (a: IdsvrHaapiSdk.UnrecoverableAction, b: IdsvrHaapiSdk.UnrecoverableAction) -> Swift.Bool
}
public enum IdsvrErrorHandling {
  case retryable(condition: IdsvrHaapiSdk.RetryCondition)
  case newHaapiFlow
  case unrecoverable(action: IdsvrHaapiSdk.UnrecoverableAction)
}
public protocol IdsvrError : Swift.Error {
  var error: Swift.String { get }
  var errorDescription: Swift.String? { get }
  var failureReason: Swift.String { get }
  var recoverySuggestion: IdsvrHaapiSdk.IdsvrErrorHandling { get }
  var cause: (any Swift.Error)? { get }
}
public protocol Masking {
  var masked: Swift.String { get }
}
extension Swift.String : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension ObjectiveC.NSObject : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URL : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.Data : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.Dictionary : IdsvrHaapiSdk.Masking where Key == Swift.String {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URLRequest : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.String {
  public static func optionalData(_ data: Foundation.Data?, encoding: Swift.String.Encoding = .utf8, fallback: Swift.String = "") -> Swift.String
  public var maskedPrefix: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@frozen public enum ActionKind : Swift.Codable, Swift.Equatable {
  case cancel
  case deviceOption
  case login
  case `continue`
  case continueAutoLogin
  case deviceSelector
  case redirect
  case authenticatorSelector
  case selectAuthenticator
  case poll
  case form
  case bankIdSameDevice
  case bankIdOtherDevice
  case passwordReset
  case accountIdRecovery
  case userRegister
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ActionKind : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: IdsvrHaapiSdk.ActionKind.RawValue)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public typealias HaapiCompletionHandler = (_ haapiResult: IdsvrHaapiSdk.HaapiResult) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class HaapiManager : ObjectiveC.NSObject {
  @objc convenience public init(haapiConfiguration: any IdsvrHaapiSdk.HaapiConfigurable) throws
  @objc deinit
  @objc final public func close()
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  final public func start(completionHandler: @escaping IdsvrHaapiSdk.HaapiCompletionHandler)
  final public func start() async -> IdsvrHaapiSdk.HaapiResult
  final public func submitForm(_ form: IdsvrHaapiSdk.FormActionModel, parameters: [Swift.String : Any], completionHandler: @escaping IdsvrHaapiSdk.HaapiCompletionHandler)
  final public func submitForm(_ form: IdsvrHaapiSdk.FormActionModel, parameters: [Swift.String : Any]) async -> IdsvrHaapiSdk.HaapiResult
  final public func followLink(_ link: IdsvrHaapiSdk.Link, completionHandler: @escaping IdsvrHaapiSdk.HaapiCompletionHandler)
  final public func followLink(_ link: IdsvrHaapiSdk.Link) async -> IdsvrHaapiSdk.HaapiResult
  @objc final public var dpop: IdsvrHaapiSdk.Dpop? {
    @objc get
  }
}
public enum DriverFollowUpTag : Swift.String, IdsvrHaapiSdk.FollowUpTag, Swift.CaseIterable {
  case flow
  case storage
  case http
  case attestation
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiSdk.DriverFollowUpTag]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [IdsvrHaapiSdk.DriverFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public struct Link : IdsvrHaapiSdk.RepresentationActionModel {
  public let href: Swift.String
  public let rel: Swift.String
  public let title: IdsvrHaapiSdk.Message?
  public let type: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: IdsvrHaapiSdk.Link, b: IdsvrHaapiSdk.Link) -> Swift.Bool
}
@objc @available(iOS 14.0, *)
@objcMembers final public class OAuthAuthorizationParameters : ObjectiveC.NSObject {
  @objc final public let scopes: [Swift.String]
  @objc final public let nonce: Swift.String?
  @objc final public let acrValues: [Swift.String]
  @objc final public let extraRequestParameters: [Swift.String : Swift.String]
  @objc public init(scopes: [Swift.String] = [], nonce: Swift.String? = nil, acrValues: [Swift.String] = [], extraRequestParameters: [Swift.String : Swift.String] = [:])
  @objc deinit
}
public enum CryptoImportError : Swift.Error, Swift.CustomDebugStringConvertible {
  case invalidPath(_: Swift.String)
  case invalidPEMString(_: Swift.String, cause: (any Swift.Error)?)
  case invalidPassphrase
  case invalidType(_: Swift.String)
  case outOfBounds
  case failedToImport(_: Swift.String)
  public var debugDescription: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiModel {
  public enum ActionFactory {
    public static func form(properties: IdsvrHaapiSdk.FormAction.Properties?, model: IdsvrHaapiSdk.FormActionModel, kind: IdsvrHaapiSdk.ActionKind, title: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.FormAction
    public static func selector(properties: IdsvrHaapiSdk.SelectorAction.Properties?, model: IdsvrHaapiSdk.SelectorActionModel, kind: IdsvrHaapiSdk.ActionKind, title: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.SelectorAction
    public static func clientOperation(properties: IdsvrHaapiSdk.ClientOperationAction.Properties?, model: IdsvrHaapiSdk.ClientOperationActionModel, kind: IdsvrHaapiSdk.ActionKind, title: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.ClientOperationAction
  }
}
@available(iOS 14.0, *)
@frozen public enum RepresentationType : Swift.Codable, Swift.Equatable {
  case authenticationStep
  case redirectionStep
  case registrationStep
  case pollingStep
  case continueSameStep
  case oauthAuthorizationResponse
  case consentorStep
  case userConsentStep
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.RepresentationType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14, *)
public enum HttpHeaderNames {
  public static let accept: Swift.String
  public static let authorization: Swift.String
  public static let contentType: Swift.String
  public static let dpop: Swift.String
  public static let haapiSessionId: Swift.String
  public static let haapiSetSessionId: Swift.String
  public static let dpopNonce: Swift.String
  public static let wwwAuthenticate: Swift.String
  public static let clientInfo: Swift.String
}
@available(iOS 14, *)
public enum MimeTypes : Swift.String {
  case happi
  case json
  case xWwwFormUrlEncoded
  public init?(rawValue: Swift.String)
  @available(iOS 14, *)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol OAuthResponse : Swift.Decodable, Swift.Encodable, Swift.Equatable {
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class SuccessfulTokenResponse : ObjectiveC.NSObject, IdsvrHaapiSdk.OAuthResponse {
  @objc final public let accessToken: Swift.String
  @objc final public let tokenType: Swift.String?
  @objc final public let scope: Swift.String?
  @objc final public let expiresIn: Swift.Int
  @objc final public let refreshToken: Swift.String?
  @objc final public let idToken: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class ErrorTokenResponse : ObjectiveC.NSObject, IdsvrHaapiSdk.OAuthResponse {
  @objc final public let error: Swift.String
  @objc final public let errorDescription: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  @objc override final public var debugDescription: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 14, *)
public struct ResponseAndData {
  public let response: Foundation.URLResponse
  public let data: Foundation.Data?
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class HaapiClient : ObjectiveC.NSObject {
  public var dpop: IdsvrHaapiSdk.Dpop? {
    get
  }
  public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.ResponseAndData, any Swift.Error>) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiModel {
  public enum FormFieldFactory {
    public static func selectOption(label: IdsvrHaapiSdk.Message, value: Swift.String, selected: Swift.Bool) -> IdsvrHaapiSdk.SelectFormField.Option
    public static func select(options: [IdsvrHaapiSdk.SelectFormField.Option], name: Swift.String, label: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.SelectFormField
    public static func checkbox(checked: Swift.Bool, readonly: Swift.Bool, name: Swift.String, value: Swift.String?, label: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.CheckboxFormField
    public static func password(name: Swift.String, value: Swift.String?, label: IdsvrHaapiSdk.Message?, placeholder: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.PasswordFormField
    public static func username(name: Swift.String, value: Swift.String?, label: IdsvrHaapiSdk.Message?, placeholder: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.UsernameFormField
    public static func text(kind: IdsvrHaapiSdk.TextFormField.Kind?, name: Swift.String, value: Swift.String?, label: IdsvrHaapiSdk.Message?, placeholder: IdsvrHaapiSdk.Message?) -> IdsvrHaapiSdk.TextFormField
    public static func context(name: Swift.String) -> IdsvrHaapiSdk.ContextFormField
    public static func hidden(name: Swift.String, value: Swift.String) -> IdsvrHaapiSdk.HiddenFormField
  }
}
@available(iOS 14.0, *)
public struct AuthenticatorSelectorStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public let title: IdsvrHaapiSdk.Message
  public let authenticators: [IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption]
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let rawJsonString: Swift.String?
  public let type: IdsvrHaapiSdk.RepresentationType
  public struct AuthenticatorOption : Swift.Codable, Swift.Equatable {
    public let title: IdsvrHaapiSdk.Message
    public let type: Swift.String?
    public let action: IdsvrHaapiSdk.FormAction
    public static func == (a: IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption, b: IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.AuthenticatorSelectorStep, rhs: IdsvrHaapiSdk.AuthenticatorSelectorStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct InteractiveFormStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public var actions: [IdsvrHaapiSdk.FormAction]
  public let type: IdsvrHaapiSdk.RepresentationType
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.InteractiveFormStep, rhs: IdsvrHaapiSdk.InteractiveFormStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct RedirectionStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public let redirectAction: IdsvrHaapiSdk.FormAction
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let type: IdsvrHaapiSdk.RepresentationType
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.RedirectionStep, rhs: IdsvrHaapiSdk.RedirectionStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct PollingStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public let mainAction: IdsvrHaapiSdk.FormAction
  public let cancelAction: IdsvrHaapiSdk.FormAction?
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let pollingProperties: IdsvrHaapiSdk.PollingProperties
  public let rawJsonString: Swift.String?
  public let type: IdsvrHaapiSdk.RepresentationType
  public var properties: (any IdsvrHaapiSdk.Properties)? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.PollingStep, rhs: IdsvrHaapiSdk.PollingStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let oauthAuthorizationResponseProperties: IdsvrHaapiSdk.OAuthAuthorizationResponseProperties
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public var properties: (any IdsvrHaapiSdk.Properties)? {
    get
  }
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.OAuthAuthorizationResponseStep, rhs: IdsvrHaapiSdk.OAuthAuthorizationResponseStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct ContinueSameStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.ContinueSameStep, rhs: IdsvrHaapiSdk.ContinueSameStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct UserConsentStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.UserConsentStep, rhs: IdsvrHaapiSdk.UserConsentStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct ExternalBrowserClientOperationStep : IdsvrHaapiSdk.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiSdk.ExternalBrowserClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.ExternalBrowserClientOperationStep, rhs: IdsvrHaapiSdk.ExternalBrowserClientOperationStep) -> Swift.Bool
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public func formattedParametersFromURL(_ url: Foundation.URL) throws -> [Swift.String : Swift.String]
  public var actionsToPresent: [IdsvrHaapiSdk.Action] {
    get
  }
  public var continueFormActionModel: IdsvrHaapiSdk.FormActionModel {
    get
  }
}
@available(iOS 14.0, *)
public struct BankIdClientOperationStep : IdsvrHaapiSdk.ClientOperationStep, Swift.Equatable {
  public let activationLink: IdsvrHaapiSdk.Link?
  public let actionModel: IdsvrHaapiSdk.BankIdClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.BankIdClientOperationStep, rhs: IdsvrHaapiSdk.BankIdClientOperationStep) -> Swift.Bool
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public var continueActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiSdk.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct EncapClientOperationStep : IdsvrHaapiSdk.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiSdk.EncapAutoActivationClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.EncapClientOperationStep, rhs: IdsvrHaapiSdk.EncapClientOperationStep) -> Swift.Bool
  public var urlToLaunch: Foundation.URL? {
    get
  }
  public var continueActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiSdk.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct WebAuthnRegistrationClientOperationStep : IdsvrHaapiSdk.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let rawJsonString: Swift.String?
  public let continueAction: IdsvrHaapiSdk.FormAction
  public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationStep, rhs: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationStep) -> Swift.Bool
  public func formattedParametersForRegistration(credentialOptions: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions, attestationObject: Foundation.Data, rawClientDataJSON: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key") -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct WebAuthnAuthenticationClientOperationStep : IdsvrHaapiSdk.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let continueAction: IdsvrHaapiSdk.FormAction
  public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationStep, rhs: IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationStep) -> Swift.Bool
  public func formattedParametersForAssertion(rawAuthenticatorData: Foundation.Data, rawClientDataJSON: Foundation.Data, signature: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key", userId: Foundation.Data? = nil) -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct GenericClientOperationStep : IdsvrHaapiSdk.ClientOperationStep, Swift.Equatable {
  public let actionModel: IdsvrHaapiSdk.GenericClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.GenericClientOperationStep, rhs: IdsvrHaapiSdk.GenericClientOperationStep) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct GenericRepresentationStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Equatable {
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let type: IdsvrHaapiSdk.RepresentationType
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let rawJsonString: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.GenericRepresentationStep, rhs: IdsvrHaapiSdk.GenericRepresentationStep) -> Swift.Bool
}
@available(iOS 14.0, *)
@frozen public enum ClientOperationName : Swift.Codable, Swift.Equatable {
  case externalBrowser
  case bankId
  case encapAutoActivation
  case webAuthnRegistration
  case webAuthnAuthentication
  case unknown(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ClientOperationName : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HaapiLogger : ObjectiveC.NSObject {
  public static var followUpTags: [any IdsvrHaapiSdk.FollowUpTag] {
    get
    set
  }
  @objc public static var isDebugEnabled: Swift.Bool
  @objc public static var isInfoEnabled: Swift.Bool
  @objc public static var isWarningEnabled: Swift.Bool
  @objc public static var isErrorEnabled: Swift.Bool
  @objc public static var isSensitiveValueMasked: Swift.Bool
  public static func appendLogSink(_ logSink: any IdsvrHaapiSdk.LogSink)
  @objc deinit
}
public enum LogType : Swift.String {
  case debug
  case error
  case info
  case warning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LogSink {
  func writeLog(logType: IdsvrHaapiSdk.LogType, followUpTag: any IdsvrHaapiSdk.FollowUpTag, message: Swift.String, file: Swift.String, line: Swift.Int)
}
@objc public enum CryptoKeyType : Swift.Int, Swift.RawRepresentable {
  case p256
  case secureEnclave
  case security
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 14.0, *)
@objc public protocol TokenBoundConfiguration {
  @objc var keyPairType: IdsvrHaapiSdk.CryptoKeyType { get }
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
@objc final public class UnboundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiSdk.TokenBoundConfiguration {
  @objc final public var keyPairType: IdsvrHaapiSdk.CryptoKeyType
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14.0, *)
@objc final public class BoundedTokenConfiguration : ObjectiveC.NSObject, IdsvrHaapiSdk.TokenBoundConfiguration {
  @objc final public let keyPairType: IdsvrHaapiSdk.CryptoKeyType
  @objc public init(keyPairType: IdsvrHaapiSdk.CryptoKeyType = .secureEnclave)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS, introduced: 14, message: "This class is experimental and for Internal/Testing purposes only. Please do not use in production.")
public class IdsvrHaapiSdkTestUtils {
  public static var isEnabled: Swift.Bool {
    get
    set
  }
  public static func createHaapiAccessorBuilderForAttestationFailure(haapiConfiguration: IdsvrHaapiSdk.HaapiConfiguration, failure: IdsvrHaapiSdk.HaapiError = HaapiError.attestationNotSupported) throws -> IdsvrHaapiSdk.HaapiAccessorBuilder
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiModel {
  public enum ActionModelFactory {
    public static func form(actionTitle: IdsvrHaapiSdk.Message?, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action], fields: [IdsvrHaapiSdk.FormField], type: Swift.String?, method: Swift.String, href: Swift.String) -> IdsvrHaapiSdk.FormActionModel
    public static func selector(options: [IdsvrHaapiSdk.Action]) -> IdsvrHaapiSdk.SelectorActionModel
    public static func clientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiSdk.ClientOperationName, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action]) -> IdsvrHaapiSdk.ClientOperationActionModel
    public static func externalBrowserClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiSdk.ClientOperationName, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action]) throws -> IdsvrHaapiSdk.ExternalBrowserClientOperationActionModel
    public static func bankIdClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiSdk.ClientOperationName, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action]) throws -> IdsvrHaapiSdk.BankIdClientOperationActionModel
    public static func encapClientOperation(arguments: [Swift.String : Swift.String], name: IdsvrHaapiSdk.ClientOperationName, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action]) throws -> IdsvrHaapiSdk.EncapAutoActivationClientOperationActionModel
    public static func webAuthnRegistrationClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiSdk.ClientOperationName, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action]) throws -> IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel
    public static func webauthnAuthenticationClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiSdk.ClientOperationName, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action]) throws -> IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel
    public static func genericClientOperation(arguments: [Swift.String : Any], name: IdsvrHaapiSdk.ClientOperationName, continueActions: [IdsvrHaapiSdk.Action], errorActions: [IdsvrHaapiSdk.Action]) -> IdsvrHaapiSdk.GenericClientOperationActionModel
    public static func link(href: Swift.String, rel: Swift.String, title: IdsvrHaapiSdk.Message?, type: Swift.String?) -> IdsvrHaapiSdk.Link
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class AuthorizationProblem : IdsvrHaapiSdk.Problem {
  @objc final public let error: Swift.String
  @objc final public let errorDescription: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class InvalidInputProblem : IdsvrHaapiSdk.Problem {
  final public let invalidFields: [IdsvrHaapiSdk.InvalidInputProblem.InvalidField]
  @objc final public let errorDescription: Swift.String?
  public struct InvalidField : Swift.Codable, Swift.Equatable {
    public let name: Swift.String
    public let reason: Swift.String?
    public let detail: IdsvrHaapiSdk.Message
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
    public static func == (a: IdsvrHaapiSdk.InvalidInputProblem.InvalidField, b: IdsvrHaapiSdk.InvalidInputProblem.InvalidField) -> Swift.Bool
  }
  required public init(from decoder: any Swift.Decoder) throws
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class Message : ObjectiveC.NSObject, Swift.Codable {
  final public let key: Swift.String?
  final public let literal: Swift.String
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiModel {
  public enum ProblemFactory {
    public static func problem(type: IdsvrHaapiSdk.ProblemType, metadata: IdsvrHaapiSdk.Metadata?, title: IdsvrHaapiSdk.Message?, messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.Problem
    public static func invalidInputField(name: Swift.String, reason: Swift.String?, detail: IdsvrHaapiSdk.Message) -> IdsvrHaapiSdk.InvalidInputProblem.InvalidField
    public static func invalidInput(invalidFields: [IdsvrHaapiSdk.InvalidInputProblem.InvalidField], errorDescription: Swift.String?, type: IdsvrHaapiSdk.ProblemType, metadata: IdsvrHaapiSdk.Metadata?, title: IdsvrHaapiSdk.Message?, messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.InvalidInputProblem
    public static func authorization(error: Swift.String, errorDescription: Swift.String?, type: IdsvrHaapiSdk.ProblemType, metadata: IdsvrHaapiSdk.Metadata?, title: IdsvrHaapiSdk.Message?, messages: [IdsvrHaapiSdk.UserMessage], links: [IdsvrHaapiSdk.Link], rawJsonString: Swift.String? = nil) -> IdsvrHaapiSdk.AuthorizationProblem
  }
}
public protocol RepresentationActionModel : Swift.Decodable, Swift.Encodable, Swift.Equatable {
}
@available(iOS 14.0, *)
public struct FormActionModel : IdsvrHaapiSdk.RepresentationActionModel {
  public let actionTitle: IdsvrHaapiSdk.Message?
  public let continueActions: [IdsvrHaapiSdk.Action]
  public let errorActions: [IdsvrHaapiSdk.Action]
  public let fields: [IdsvrHaapiSdk.FormField]
  public let type: Swift.String
  public let method: Swift.String
  public let href: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.FormActionModel, rhs: IdsvrHaapiSdk.FormActionModel) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct SelectorActionModel : IdsvrHaapiSdk.RepresentationActionModel {
  public let options: [IdsvrHaapiSdk.Action]
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.SelectorActionModel, rhs: IdsvrHaapiSdk.SelectorActionModel) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class ClientOperationActionModel : IdsvrHaapiSdk.RepresentationActionModel {
  final public let name: IdsvrHaapiSdk.ClientOperationName
  final public let arguments: [Swift.String : Any]
  final public let continueActions: [IdsvrHaapiSdk.Action]
  final public let errorActions: [IdsvrHaapiSdk.Action]
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: IdsvrHaapiSdk.ClientOperationActionModel, rhs: IdsvrHaapiSdk.ClientOperationActionModel) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ExternalBrowserClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class BankIdClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let autoStartToken: Swift.String
  final public let redirect: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class EncapAutoActivationClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let activationCode: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public var urlToLaunch: Foundation.URL? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class WebAuthnRegistrationClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public var platformOptions: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.PlatformCredentialRequestOptions?
  final public var crossPlatformOptions: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CrossPlatformCredentialRequestOptions?
  final public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let userIdData: Foundation.Data?
    final public let userName: Swift.String?
    final public let displayName: Swift.String?
    final public let userVerification: Swift.String?
    final public let attestation: Swift.String?
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PlatformCredentialRequestOptions : IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CrossPlatformCredentialRequestOptions : IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    final public let publicKeyCredParams: [IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialParams]?
    final public let excludedCredentials: [IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.ExcludedCredential]?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class CredentialParams {
    final public let algorithmId: Swift.Int
    final public let type: Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class ExcludedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class WebAuthnAuthenticationClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public var credentialOptions: IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel.CredentialRequestOptions
  final public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers final public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let platformAllowCredentials: [IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let crossPlatformAllowCredentials: [IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let userVerificationPreference: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class AllowedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class GenericClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Haapi : ObjectiveC.NSObject {
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14.0, *)
@frozen public enum PollingStatus : Swift.Codable, Swift.Equatable {
  case pending
  case done
  case failed
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.PollingStatus : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
@objc public protocol HaapiManagerAccessor {
}
@available(iOS 14.0, *)
@objc public protocol OAuthAccessor : IdsvrHaapiSdk.HaapiManagerAccessor {
  @objc var oAuthTokenManager: IdsvrHaapiSdk.OAuthTokenManager { get }
}
@available(iOS 14.0, *)
@objc public protocol HaapiAccessor : IdsvrHaapiSdk.OAuthAccessor {
  @objc var haapiManager: IdsvrHaapiSdk.HaapiManager { get }
  @objc func close()
}
@objc public enum HaapiAccessorOption : Swift.Int {
  case all
  case oauth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @available(iOS 14.0, *)
@objcMembers final public class HaapiAccessorBuilder : ObjectiveC.NSObject {
  @objc public init(haapiConfiguration: IdsvrHaapiSdk.HaapiConfiguration)
  @objc @discardableResult
  final public func setHaapiAccessorOption(option: IdsvrHaapiSdk.HaapiAccessorOption) -> IdsvrHaapiSdk.HaapiAccessorBuilder
  @objc @discardableResult
  final public func setDCRConfiguration(configuration: IdsvrHaapiSdk.DCRConfiguration) -> IdsvrHaapiSdk.HaapiAccessorBuilder
  @objc @discardableResult
  final public func setAttestationValidationRetryCount(maxRetries: Swift.Int) -> IdsvrHaapiSdk.HaapiAccessorBuilder
  final public func build<T>(shouldClearExistingDCRClient: Swift.Bool = false, completionHandler: @escaping (Swift.Result<T, IdsvrHaapiSdk.HaapiError>) -> Swift.Void) where T : IdsvrHaapiSdk.HaapiManagerAccessor
  final public func build<T>(shouldClearExistingDCRClient: Swift.Bool = false) async throws -> T where T : IdsvrHaapiSdk.HaapiManagerAccessor
  @objc deinit
}
@available(*, unavailable)
@objc extension IdsvrHaapiSdk.HaapiAccessorBuilder {
  @objc final public func build(shouldClearExistingDCRClient: Swift.Bool = false, completionHandler: @escaping ((any IdsvrHaapiSdk.HaapiManagerAccessor)?, (any Swift.Error)?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class AccessToken : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc final public let expiresOn: Foundation.Date
  @objc public func isValid(atTime: Foundation.Date, minTtl: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class DpopAccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: IdsvrHaapiSdk.AccessToken
  @objc final public let dpop: IdsvrHaapiSdk.Dpop
  @objc final public let dpopNonce: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc public func dpopHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func authorizationHeaderValue() -> Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@available(iOS 14, *)
extension Foundation.URLResponse {
  public func haapiSessionId() -> Swift.String?
  public func dpopNonce() -> Swift.String?
}
@available(iOS 14, *)
extension Foundation.URLRequest {
  public mutating func addAuthorizationHeader(headerValue: Swift.String)
  public mutating func addDpopHeader(headerValue: Swift.String)
  public mutating func addClientInfoHeader(headerValue: Swift.String)
  public mutating func addDpopAccessTokenHeaders(from dpopAccessTokenInfo: IdsvrHaapiSdk.DpopAccessTokenInfo, httpMethod: Swift.String, url: Foundation.URL) throws
  public mutating func addHaapiMediaTypeAcceptHeader()
  public mutating func addHaapiSessionIdHeader(_ sessionId: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiModel {
  public enum PropertiesFactory {
    public static func generic(rawJsonString: Swift.String) -> IdsvrHaapiSdk.GenericProperties
    public static func polling(rawJsonString: Swift.String, recipientOfCommunication: Swift.String?, status: IdsvrHaapiSdk.PollingStatus) -> IdsvrHaapiSdk.PollingProperties
    public static func oAuthAuthorizationResponse(rawJsonString: Swift.String, scope: Swift.String?, state: Swift.String?, code: Swift.String?, idToken: Swift.String?, rawJson: [Swift.String : Swift.String]) -> IdsvrHaapiSdk.OAuthAuthorizationResponseProperties
    public static func formAction(authenticatorType: Swift.String, rawJsonString: Swift.String) -> IdsvrHaapiSdk.FormAction.Properties
    public static func selectorAction(rawJsonString: Swift.String) -> IdsvrHaapiSdk.SelectorAction.Properties
    public static func clientOperation(rawJsonString: Swift.String) -> IdsvrHaapiSdk.ClientOperationAction.Properties
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiModel {
  public enum TokenResponseFactory {
    public static func success(accessToken: Swift.String, tokenType: Swift.String?, scope: Swift.String?, expiresIn: Swift.Int, refreshToken: Swift.String?, idToken: Swift.String?) -> IdsvrHaapiSdk.SuccessfulTokenResponse
    public static func error(error: Swift.String, errorDescription: Swift.String) -> IdsvrHaapiSdk.ErrorTokenResponse
  }
}
@objc @available(iOS 14.0, *)
@objcMembers public class HaapiTokenManagerBuilder : ObjectiveC.NSObject {
  @objc public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
  @objc @discardableResult
  public func setName(_ name: Swift.String) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func disableDeviceCheckAttestation() -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setAttestationMaxRetryCount(maxRetries: Swift.Int) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setTokenBoundConfiguration(config: any IdsvrHaapiSdk.TokenBoundConfiguration) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setClientAuthenticationMethod(method: any IdsvrHaapiSdk.ClientAuthenticationMethod) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setApplicationBundle(_ bundle: Foundation.Bundle?) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc public func build() throws -> IdsvrHaapiSdk.HaapiTokenManager
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.TextFormField.Kind : Swift.Sendable {}
extension IdsvrHaapiSdk.CryptoKeyType : Swift.Equatable {}
extension IdsvrHaapiSdk.CryptoKeyType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.TokenRevocationResponse : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ProblemType : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.JWTAsymmetricAlgorithm : Swift.Equatable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.JWTAsymmetricAlgorithm : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.JWTAsymmetricAlgorithm : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.JWTSymmetricAlgorithm : Swift.Equatable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.JWTSymmetricAlgorithm : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.JWTSymmetricAlgorithm : Swift.RawRepresentable {}
extension IdsvrHaapiSdk.SdkFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiSdk.SdkFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiSdk.SdkFollowUpTag : Swift.RawRepresentable {}
extension IdsvrHaapiSdk.RetryCondition : Swift.Equatable {}
extension IdsvrHaapiSdk.RetryCondition : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ActionKind : Swift.Sendable {}
extension IdsvrHaapiSdk.DriverFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiSdk.DriverFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiSdk.DriverFollowUpTag : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.RepresentationType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.RepresentationType : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.RepresentationType : Swift.BitwiseCopyable {}
@available(iOS 14, *)
extension IdsvrHaapiSdk.MimeTypes : Swift.Equatable {}
@available(iOS 14, *)
extension IdsvrHaapiSdk.MimeTypes : Swift.Hashable {}
@available(iOS 14, *)
extension IdsvrHaapiSdk.MimeTypes : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ClientOperationName : Swift.Sendable {}
extension IdsvrHaapiSdk.LogType : Swift.Equatable {}
extension IdsvrHaapiSdk.LogType : Swift.Hashable {}
extension IdsvrHaapiSdk.LogType : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.PollingStatus : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.PollingStatus : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.PollingStatus : Swift.BitwiseCopyable {}
extension IdsvrHaapiSdk.HaapiAccessorOption : Swift.Equatable {}
extension IdsvrHaapiSdk.HaapiAccessorOption : Swift.Hashable {}
extension IdsvrHaapiSdk.HaapiAccessorOption : Swift.RawRepresentable {}
